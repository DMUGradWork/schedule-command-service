version: '3.8'

services:
  # 1. Zookeeper (Kafka 관리자)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: schedule-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - schedule-network

  # 2. Kafka 브로커
  # Spring 앱에서는 localhost:9092 로 접속합니다.
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: schedule-kafka-broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper # Zookeeper가 먼저 실행된 후 실행
    networks:
      - schedule-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # 컨테이너 이름으로 Zookeeper를 찾음
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  # 3. MongoDB (Schedule Query 데이터베이스)
  mongodb:
    image: mongo:7.0
    container_name: schedule-query-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: schedule_query
    volumes:
      - mongodb_data:/data/db
    networks:
      - schedule-network

  # 4. Mongo Express (DB 관리용 웹 UI)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: schedule-query-mongo-express
    restart: always
    ports:
      - "8083:8081" # Spring 앱 포트(8081, 8082)와 충돌 방지
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      - mongodb
    networks:
      - schedule-network

volumes:
  mongodb_data:

networks:
  schedule-network:
    driver: bridge
